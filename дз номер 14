#include <iostream>
#include <stdexcept>

enum class TransportMode { Car, Bus, Bicycle, Walking };

double calculateTravelTime(TransportMode mode, double distance) {
  
  if (distance < 0) {
    throw std::invalid_argument("Distance cannot be negative");
  }

  double speed;
  switch (mode) {
    case TransportMode::Car:
      speed = 60.0;
      break;
    case TransportMode::Bus:
      speed = 40.0;
      break;
    case TransportMode::Bicycle:
      speed = 20.0;
      break;
    case TransportMode::Walking:
      speed = 5.0;
      break;
    default:
      throw std::invalid_argument("Unknown transport mode");
  }

  
  if (speed == 0.0) {
    throw std::runtime_error("Speed cannot be zero");
  }

  
  double timeInHours = distance / speed;

  
  return timeInHours * 60.0;
}

int main() {
  try {
    std::cout << "Время в пути на машине на 120 км: " << calculateTravelTime(TransportMode::Car, 120.0) << " мин" << std::endl;
    std::cout << "Время в пути на автобусе на 50 км: " << calculateTravelTime(TransportMode::Bus, 50.0) << " мин" << std::endl;
    std::cout << "Время в пути на велосипеде на 10 км: " << calculateTravelTime(TransportMode::Bicycle, 10.0) << " мин" << std::endl;
    std::cout << "Время в пути пешком на 2.5 км: " << calculateTravelTime(TransportMode::Walking, 2.5) << " мин" << std::endl;
    
    std::cout << "Время в пути на машине на -120 км: " << calculateTravelTime(TransportMode::Car, -120.0) << " мин" << std::endl;
  } catch (const std::invalid_argument& e) {
    std::cerr << "Ошибка: " << e.what() << std::endl;
  } catch (const std::runtime_error& e) {
    std::cerr << "Ошибка выполнения: " << e.what() << std::endl;
  }

  return 0;
}
